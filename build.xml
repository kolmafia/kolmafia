<project name="KoLmafia" default="debug" basedir=".">
<description>
KoLmafia is an open-source Java-based helper application for the browser-based game Kingdom of Loathing.

KoLmafia enriches the Kingdom of Loathing interface with additional features and shortcuts and also allows
you to load or develop your own automation scripts to complete repetitive tasks easily.
KoLmafia is documented at https://wiki.kolmafia.us

Kingdom of Loathing is available at https//www.kingdomofloathing.com

All code copyright the respective sourcecode rightsholders.  Please see copyright statements in the code for more details.

</description>
	<!-- ========================================== -->
	<!--  set the global properties for this build  -->
	<!-- ========================================== -->

	<property file="build.properties" />
	<property file="default.properties" />
	<property environment="env" />
	<taskdef resource="cloverlib.xml" classpath="${lib}/testjar/clover.jar"/>
	<property name="clover.snapshot.file" value=".clover/coverage.db.snapshot"/>

	<available file=".svn" property="using.svn" />
	<available file=".git" property="using.gitsvn" />

	<target name="help" description="Prints the main targets and their uses">
		<java classname="org.apache.tools.ant.Main">
			<arg value="-emacs" />
			<arg value="-projecthelp" />
		</java>

	</target>
	
	<!-- ========================================== -->
	<!--  create directories used by other targets  -->
	<!-- ========================================== -->

	<target name="init">

		<tstamp />
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />

	</target>

	<!-- ================================== -->
	<!--  update files from the repository  -->
	<!-- ================================== -->

	<target name="update" description="Executes the svn update command in the project root directory">

		<exec executable="svn" failifexecutionfails="${svn.fail.on.error}">
			<arg value="update" />
			<arg value="${root}" />
		</exec>

	</target>

	<!-- ================================================== -->
	<!--  guesses the SVN revision of the local repository  -->
	<!-- ================================================== -->

	<target name="version" depends="svn-version,gitsvn-version" if="revision">

		<echo message="Current revision: ${revision}" />

	</target>

	<!-- ========================================== -->
	<!--  get SVN revision number using svnversion  -->
	<!-- ========================================== -->

	<target name="svn-version" if="using.svn">

		<exec executable="svnversion" outputproperty="revision" failifexecutionfails="false">
			<arg value="-n" />
			<arg value="${root}" />
		</exec>

	</target>

	<!-- ============================================ -->
	<!--  get SVN revision number using git find-rev  -->
	<!-- ============================================ -->

	<target name="gitsvn-version" if="using.gitsvn">

		<exec executable="sh" outputproperty="revision" failifexecutionfails="false">
			<arg value="-c" />
			<arg value="git svn info | grep '^Revision: [0-9]*$' | awk '{ print $2 }'" />
		</exec>

	</target>

	<!-- ======================= -->
	<!--  clean up object files  -->
	<!-- ======================= -->

	<target name="clean">

		<!--
		Really important not to follow the symlink to
		/Applications and delete it...
		-->
		<symlink action="delete" link="${dist}/${version-name}/Applications" failonerror="false" />

		<clover-clean/>
		<delete dir="${appfile}" failonerror="false" />

		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${build}" defaultexcludes="no" followsymlinks="true" includes="**/*" />
			<fileset dir="${docs}" defaultexcludes="no" followsymlinks="true" includes="**/*" />
			<fileset dir="${dist}" defaultexcludes="no" followsymlinks="true" includes="*.jar" />
			<fileset dir="${dist}" defaultexcludes="no" followsymlinks="true" includes="*.tar.gz" />
			<fileset dir="${dist}" defaultexcludes="no" followsymlinks="true" includes="*.exe" />
			<fileset dir="${dist}" defaultexcludes="no" followsymlinks="true" includes="*.deb" />
		</delete>

	</target>

	<!-- ================================ -->
	<!--  clean up KoLmafia object files  -->
	<!-- ================================ -->

	<target name="start">

		<delete dir="${build}/net/sourceforge/kolmafia" failonerror="false" />
		<delete dir="${docs}" failonerror="false" />
		<delete dir="${appfile}" failonerror="false" />

		<delete failonerror="false">
			<fileset dir="${dist}">
				<include name="${ant.project.name}*" />
			</fileset>
		</delete>

		<antcall target="init" />

	</target>

	<!-- ====================== -->
	<!--  generate class files  -->
	<!-- ====================== -->

	<target name="compile-deps" >
		<javac
			compiler="modern"
			source="1.8"
			target="1.8"
			release="8"
			srcdir="${lib}"
			destdir="${build}"
			failonerror="false"
			debug="on"
			debuglevel="lines,vars,source"
			deprecation="off"
			encoding="utf-8"
			nowarn="on"
			includeantruntime="false"
			errorProperty="compile.failed">
			<classpath>
				<fileset dir="${lib}/jar" includes="**/*.jar"/>
				<fileset dir="${lib}/testjar" includes="**/*.jar"/>
			</classpath>
		</javac>

		<fail if="compile.failed" message="Failed to compile third-party libraries" />

		<copy todir="${build}" preservelastmodified="true">
			<fileset dir="${lib}">
				<exclude name="**/*.jar" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="compile" depends="init,version,compile-deps">
        <antcall target="set.version" />

		<javac
			compiler="modern"
			source="1.8"
			target="1.8"
			release="8"
			srcdir="${src}"
			destdir="${build}"
			failonerror="false"
			debug="on"
			debuglevel="lines,vars,source"
			deprecation="off"
			encoding="utf-8"
			nowarn="on"
			includeantruntime="false"
			errorProperty="compile.failed">
			<classpath>
				<pathelement path="${build}"/>
				<fileset dir="${src}/jar" includes="**/*.jar" />
			</classpath>
		</javac>

        <antcall target="unset.properties" />

		<fail if="compile.failed" message="Failed to compile KoLmafia source code" />

		<copy todir="${build}" preservelastmodified="true">
			<fileset dir="${src}">
				<exclude name="**/*.jar" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>

	</target>

	<target name="test-compile" depends="compile">
	  <javac source="1.8" srcdir="${test}" destdir="${build}" includeantruntime="false">
		  <classpath>
			<fileset dir="${lib}/testjar" includes="**/*.jar" />
			<fileset dir="${src}/jar" includes="**/*.jar" />
		  </classpath>
		</javac>
		<copy todir="${build}/jar" preservelastmodified="true">
			<fileset dir="${src}/jar">
				<include name="**/*.jar" />
			</fileset>
		</copy>
	</target>

	<target name="test" depends="test-compile" description="Compiles, runs, and reports the results of all JUnit tests in the test directory">
		<junit printsummary="on" haltonfailure="yes" fork="true" dir="${test}/root">
			<jvmarg value="-Dline.separator=&#10;"/>
			<jvmarg value="-DuseCWDasROOT=true" />
			<classpath>
				<pathelement location="${build}"/>
				<fileset dir="${lib}/jar" includes="**/*.jar" />
				<fileset dir="${lib}/testjar" includes="**/*.jar" />
				<fileset dir="${src}/jar" includes="**/*.jar" />
			</classpath>
			<formatter type="brief" usefile="false" />
			<batchtest>
			  <clover-optimized-testset snapshotfile="${clover.snapshot.file}">
				<fileset dir="${test}" includes="**/*Test.java" />
			  </clover-optimized-testset>
			</batchtest>
		</junit>
	</target>

	<!-- =========================== -->
	<!--  Generate coverage reports  -->
	<!-- =========================== -->
	<!-- Usage: `ant -lib lib/testjar coverage clover.report`-->

	<target name="with.clover">
	  <clover-setup source="1.8">
		<fileset dir="${src}" includes="**/*.java">
		  <!-- Add a couple of exclusions for files with
		       methods that are too large for instrumentation. -->
		  <!-- parseConsumption is ~5000 lines long. -->
		  <exclude name="**/UseItemRequest.java" />
		  <!-- postChoice1 is ~5000 lines long. -->
		  <exclude name="**/ChoiceManager.java" />
		</fileset>
		<testSources dir="${test}" includes="**/*.java" />
	  </clover-setup>
	</target>

	<target name="coverage-compile" depends="with.clover,compile-deps">
		<javac source="1.8" srcdir="src" destdir="${build}" includeantruntime="false">
		  <include name="**/*.java" />
		  <classpath>
			<fileset dir="${lib}/jar" includes="**/*.jar" />
			<fileset dir="${src}/jar" includes="**/*.jar" />
		  </classpath>
		</javac>
		<copy todir="${build}/jar" preservelastmodified="true">
			<fileset dir="${src}/jar">
				<exclude name="**/*.jar" />
			</fileset>
		</copy>
	</target>

	<target name="clover.snapshot" depends="with.clover">
      <clover-snapshot file="${clover.snapshot.file}"/>
	</target>

	<target name="coverage" depends="coverage-compile, test, clover.snapshot" description="Runs tests with all sources instrumented." />

	<target name="clover.report">
	  <clover-html-report outdir="clover/clover_html" title="KoLmafia coverage"/>
	</target>

	<!-- ========================================== -->
	<!--  generate a zipped TAR of the source code  -->
	<!-- ========================================== -->

	<target name="tar" depends="init">

		<tar destfile="${tarfile}" basedir="${root}" compression="gzip">
			<exclude name="build/**" />
			<exclude name="dist/**" />
		</tar>

	</target>

	<!-- =========================== -->
	<!--  generate the standard JAR  -->
	<!-- =========================== -->

	<target name="jar" depends="compile">

		<jar
			destfile="${jarfile}"
			basedir="${build}"
			update="true"
			index="true"
			compress="true">

			<manifest>
				<attribute name="Main-Class" value="${main}" />
			</manifest>
			<zipgroupfileset dir="${lib}/jar">
				<include name="*.jar"/>
			</zipgroupfileset>
			<zipgroupfileset dir="${src}/jar">
				<include name="*.jar"/>
			</zipgroupfileset>
		</jar>

	</target>

	<!-- =========================== -->
	<!--  generate the standard EXE  -->
	<!-- =========================== -->

	<target name="jsmooth" depends="init,jar">

		<copy file="${win.jsmoothfile}" tofile="${win.tmp.jsmoothfile}" />
		<replace file="${win.tmp.jsmoothfile}" token="dist/KoLmafia.exe" value="${exefile}" />
		<replace file="${win.tmp.jsmoothfile}" token="dist/KoLmafia.jar" value="${jarfile}" />

		<taskdef name="jsmooth" classname="net.charabia.jsmoothgen.ant.JSmoothGen" classpath="${util}/windows/jsmoothgen-ant.jar" />

		<jsmooth project="${win.tmp.jsmoothfile}" skeletonroot="${util}/windows/skeletons" />

                <delete file="${win.tmp.jsmoothfile}" />

	</target>

	<!-- ================================ -->
	<!--  generate an application bundle  -->
	<!-- ================================ -->

	<target name="jarbundler" depends="init,jar">

		<taskdef name="jarbundler" classname="com.ultramixer.jarbundler.JarBundler" classpath="${util}/macosx/${mac.jarbundlerjar}" />
		<jarbundler dir="${dist}"
			    name="${version-name}"
			    mainclass="${main}"
			    jar="${jarfile}"
			    icon="${mac.icon}"
			    vmoptions="${mac.vmoptions}"
			    stubfile="${mac.stubfile}"
			    />

	</target>

	<!-- ========================== -->
	<!--  create an OSX disk image  -->
	<!-- ========================== -->

	<target name="dmg" depends="init,jar,jarbundler">

		<mkdir dir="${dist}/${version-name}" />

		<symlink action="single" link="${dist}/${version-name}" resource="/Applications" failonerror="false" />
		<exec executable="cp" dir="${dist}">
			<arg line="-pPR ${basedir}/${appfile} ${basedir}/${dist}/${version-name}/" />
		</exec>

	        <delete file="${basedir}/${dmgfile}" />
		<exec executable="hdiutil" dir="${dist}">
			<arg line="create ${basedir}/${dmgfile} -srcfolder ${basedir}/${dist}/${version-name} -volname ${version-name}" />
		</exec>

		<exec executable="rm" dir="${dist}">
			<arg line="-rf ${ant.project.name}*" />
		</exec>
	</target>

	<!-- ========================== -->
	<!--  create a Debian package   -->
	<!-- ========================== -->

	<target name="debian" depends="init,jar,desktop">

		<taskdef name="deb" classname="com.googlecode.ant_deb_task.Deb" classpath="${util}/debian/ant-deb.jar" />

		<deb todir="${dist}" package="kolmafia" priority="optional" section="games" depends="sun-java6-jre">
			<version upstream="${revision}" debian="${revision}" />
			<maintainer name="Veracity" email="veracity@hambo.com" />
			<description synopsis="${version.synopsis}">${version.synopsis}</description>
			<tarfileset file="${jarfile}" prefix="usr/lib" filemode="755" />
			<tarfileset file="${build}/kolmafia.desktop" prefix="usr/share/applications" />
			<tarfileset file="util/debian/kol.xpm" prefix="usr/share/pixmaps" />
			<tarfileset file="util/debian/kol" prefix="usr/bin" filemode="755" />
		</deb>

	</target>

	<!-- ============================= -->
	<!--  create Debian desktop entry  -->
	<!-- ============================= -->

	<target name="desktop">

		<taskdef name="desktopentry" classname="com.googlecode.ant_deb_task.DesktopEntry" classpath="${util}/debian/ant-deb.jar" />

		<desktopentry toFile="build/kolmafia.desktop" name="${ant.project.name}" comment="${version.synopsis}" exec="/usr/bin/kol" icon="kol.xpm" terminal="false" type="Application" categories="Game;RolePlaying" />

	</target>

	<!-- ================================ -->
	<!--  generate the alpha testing JAR  -->
	<!-- ================================ -->

	<target name="debug" depends="start,version" description="Generates a KoLmafia jar from current sources for alpha testing">

		<antcall target="set.released.false" />
		<antcall target="jar" />

	</target>

	<!-- ============================ -->
	<!--  generate a daily build JAR  -->
	<!-- ============================ -->

	<target name="daily" depends="clean,init,update,version" description="Cleans the dist directory, updates source from SVN, and builds the KoLmafia daily jar">

		<antcall target="set.released.false"/>

		<antcall target="compile" />

		<jar
			destfile="${dist}/${ant.project.name}-${revision}.jar"
			basedir="${build}"
			update="true"
			index="true"
			compress="true">

			<manifest>
				<attribute name="Main-Class" value="${main}" />
			</manifest>
			<zipgroupfileset dir="${lib}/jar">
				<include name="*.jar"/>
			</zipgroupfileset>
			<zipgroupfileset dir="${src}/jar">
				<include name="*.jar"/>
			</zipgroupfileset>
		</jar>

	</target>
	
	<!-- ============================================ -->
	<!--  update KoLConstants.java for Daily Builds   -->
	<!-- ============================================ -->

	<target name="set.released.false" depends="version">

		<replaceregexp
				file="${KoLConstants}"
				match="RELEASED = .*;"
				replace="RELEASED = false;" />

	</target>

	<!-- ============================================ -->
	<!--  update KoLConstants.java for Daily Builds   -->
	<!-- ============================================ -->

	<target name="set.version" depends="version">

		<replaceregexp
				file="${KoLConstants}"
				match="${version.rev.pattern}"
				replace="String REVISION = &quot;${revision}&quot;;" />

	</target>

	<!-- ============================================== -->
	<!--  update KoLConstants.java after Daily Builds   -->
	<!-- ============================================== -->

	<target name="unset.properties" depends="version">

		<replaceregexp
				file="${KoLConstants}"
				match="${version.rev.pattern}"
				replace="${version.rev}" />

		<replaceregexp
				file="${KoLConstants}"
				match="RELEASED = .*;"
				replace="RELEASED = true;" />

	</target>

	<!-- =========================== -->
	<!--  update KoLConstants.java   -->
	<!-- =========================== -->

	<target name="set.dist.properties">

		<replaceregexp
			file="${KoLConstants}"
			match="${version.date.pattern}"
			replace="${version.date}" />

		<replaceregexp
			file="${KoLConstants}"
			match="${version.name.pattern}"
			replace="${version.name}" />

		<replaceregexp
			file="${KoLConstants}"
			match="${version.rev.pattern}"
			replace="${version.rev}" />

	</target>

	<!-- =========================== -->
	<!--  generate the distribution  -->
	<!-- =========================== -->

	<target name="dist" depends="clean,init,test,tar,jar,jsmooth,dmg" description="Cleans the output directories, builds KoLmafia jar, and creates distributable packages for unix, MacOS, and Windows platforms">

	</target>


	<!-- ==================================================== -->
	<!--  runs program with all needed libraries in the path  -->
	<!-- ==================================================== -->

	<target name="exec" depends="compile" description="Compiles and launches KoLmafia">

		<copy todir="${build}/jar" preservelastmodified="true">
			<fileset dir="${src}/jar">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		<java fork="true" classname="${main}" classpath="${build}:${build}/jar/*" dir="${dist}">
			<jvmarg line="${exec.vmoptions}" />
		</java>
	</target>


	<!-- ================================================================= -->
	<!--  runs program with all needed libraries in the path using JRebel  -->
	<!-- ================================================================= -->

	<target name="exec-jrebel" depends="compile" description="Compiles and launches KoLmafia using JRebel">

		<copy
			todir="${build}"
			overwrite="true"
			preservelastmodified="true"
			file="util/rebel.xml" />

		<replaceregexp
			file="${build}/rebel.xml"
			match="kolmafia"
			replace="${basedir}/${build}" />

		<java fork="true" classname="${main}" classpath="${build}:${build}/jar/*" dir="${dist}">
			<jvmarg line="-javaagent:${jrebel.file} ${exec.vmoptions}" />
		</java>
	</target>

	<!-- ============================================= -->
	<!--  generates the release notes for the archive  -->
	<!-- ============================================= -->

	<target name="notes" depends="init" description="Creates release notes file from svn revision history">

		<exec executable="svn" failifexecutionfails="true" output="${logfile}">
			<arg value="log" />
			<arg value="-r" />
			<arg value="${svn.revision.base}:HEAD" />
			<arg value="${root}" />
		</exec>

		<replaceregexp file="${logfile}"
					   match="----.*"
					   replace=""
					   flags="g"
					   byline="true" />
		<replaceregexp file="${logfile}"
					   match="(\r?\n)\r?\n+"
					   replace="\1"
					   flags="g" />
		<replaceregexp file="${logfile}"
					   match="r(\d+).*"
					   replace="${line.separator}Revision: [url=https://sourceforge.net/p/kolmafia/code/\1]\1[/url]"
					   flags="g"
					   byline="true" />


		<concat destfile="${docs}/release.txt"
				force="no">
			<filelist dir="${util}"
					  files="release-header.txt"/>
			<filelist files="${logfile}"/>
		</concat>

		<delete file="${logfile}" failonerror="false" />
	</target>

	<!-- ======================================= -->
	<!--  generate the javadocs from sourcecode  -->
	<!-- ======================================= -->

	<target name="javadoc" depends="init" description="Generates javadoc files for KoLmafia">

		<mkdir dir="${docs}" />
		<mkdir dir="${docs}/api" />

		<javadoc sourcepath="${src}" destdir="${docs}" packagenames="*">

			<link href="https://docs.oracle.com/javase/8/docs/api/" />

			<classpath>
				<pathelement location="${lib}" />
				<pathelement location="${build}" />
				<fileset dir="${src}/jar">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>

		</javadoc>

	</target>

</project>
