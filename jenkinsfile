pipeline {
  agent any
  stages {
    stage('Git Update') {
      steps {
        cleanWs()
        script {
          checkout([$class: 'GitSCM', branches: [
            [name: '*/main']
          ], extensions: [
            [$class: 'CloneOption', depth: 1000000, noTags: false, reference: '', shallow: true]
          ], userRemoteConfigs: [
            [url: 'https://github.com/kolmafia/kolmafia']
          ]])
        }
      }
    }
    stage('Building') {
      steps {
        timeout(time: 15, unit: 'MINUTES') {
          script {
            sh 'ls'
            sh 'java --version'
            sh './gradlew -v'
            sh './gradlew --no-daemon clean shadowJar'
          }
        }  
      }
    }
    stage('Testing') {
      steps {
        timeout(time: 15, unit: 'MINUTES') {
          script {
            sh './gradlew --no-daemon jacocoTestReport'
            jacoco buildOverBuild: true, changeBuildStatus: true, deltaBranchCoverage: '5', deltaClassCoverage: '5', deltaComplexityCoverage: '5', deltaInstructionCoverage: '5', deltaLineCoverage: '5', deltaMethodCoverage: '5', maximumBranchCoverage: '70', maximumClassCoverage: '70', maximumComplexityCoverage: '70', maximumInstructionCoverage: '70', maximumLineCoverage: '70', maximumMethodCoverage: '70', runAlways: true
            publishCoverage adapters: [jacocoAdapter(mergeToOneReport: true, path: 'build/reports/jacoco/test/jacocoTestReport.xml')], sourceFileResolver: sourceFiles('NEVER_STORE')
            publishHTML([allowMissing: true, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'build/reports/jacoco/test/html/', reportFiles: 'index.html', reportName: 'JaCoCo Test Report', reportTitles: ''])
          }
        }
      }
    }
    stage('Archiving') {
      steps {
        script {
          archiveArtifacts 'dist/*.jar'
        }
      }
    }
  }
}
